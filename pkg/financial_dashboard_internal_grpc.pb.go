// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: financial_dashboard_internal.proto

package pkg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FinancialDashboardClient is the client API for FinancialDashboard service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FinancialDashboardClient interface {
	// Topup Balance
	TopupUpdateBalance(ctx context.Context, in *TUBRequest, opts ...grpc.CallOption) (*Response, error)
	// History Avarage Balance
	ReloadOverdraftBalance(ctx context.Context, in *ROBRequest, opts ...grpc.CallOption) (*Response, error)
}

type financialDashboardClient struct {
	cc grpc.ClientConnInterface
}

func NewFinancialDashboardClient(cc grpc.ClientConnInterface) FinancialDashboardClient {
	return &financialDashboardClient{cc}
}

func (c *financialDashboardClient) TopupUpdateBalance(ctx context.Context, in *TUBRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/worlderteam.sample.proto.FinancialDashboard/TopupUpdateBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialDashboardClient) ReloadOverdraftBalance(ctx context.Context, in *ROBRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/worlderteam.sample.proto.FinancialDashboard/ReloadOverdraftBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FinancialDashboardServer is the server API for FinancialDashboard service.
// All implementations should embed UnimplementedFinancialDashboardServer
// for forward compatibility
type FinancialDashboardServer interface {
	// Topup Balance
	TopupUpdateBalance(context.Context, *TUBRequest) (*Response, error)
	// History Avarage Balance
	ReloadOverdraftBalance(context.Context, *ROBRequest) (*Response, error)
}

// UnimplementedFinancialDashboardServer should be embedded to have forward compatible implementations.
type UnimplementedFinancialDashboardServer struct {
}

func (UnimplementedFinancialDashboardServer) TopupUpdateBalance(context.Context, *TUBRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopupUpdateBalance not implemented")
}
func (UnimplementedFinancialDashboardServer) ReloadOverdraftBalance(context.Context, *ROBRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReloadOverdraftBalance not implemented")
}

// UnsafeFinancialDashboardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FinancialDashboardServer will
// result in compilation errors.
type UnsafeFinancialDashboardServer interface {
	mustEmbedUnimplementedFinancialDashboardServer()
}

func RegisterFinancialDashboardServer(s grpc.ServiceRegistrar, srv FinancialDashboardServer) {
	s.RegisterService(&FinancialDashboard_ServiceDesc, srv)
}

func _FinancialDashboard_TopupUpdateBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TUBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialDashboardServer).TopupUpdateBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worlderteam.sample.proto.FinancialDashboard/TopupUpdateBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialDashboardServer).TopupUpdateBalance(ctx, req.(*TUBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialDashboard_ReloadOverdraftBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ROBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialDashboardServer).ReloadOverdraftBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worlderteam.sample.proto.FinancialDashboard/ReloadOverdraftBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialDashboardServer).ReloadOverdraftBalance(ctx, req.(*ROBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FinancialDashboard_ServiceDesc is the grpc.ServiceDesc for FinancialDashboard service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FinancialDashboard_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "worlderteam.sample.proto.FinancialDashboard",
	HandlerType: (*FinancialDashboardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TopupUpdateBalance",
			Handler:    _FinancialDashboard_TopupUpdateBalance_Handler,
		},
		{
			MethodName: "ReloadOverdraftBalance",
			Handler:    _FinancialDashboard_ReloadOverdraftBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "financial_dashboard_internal.proto",
}
